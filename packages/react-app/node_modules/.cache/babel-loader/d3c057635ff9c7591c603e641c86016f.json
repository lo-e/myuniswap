{"ast":null,"code":"import { useConfig } from './useConfig';\nimport { useEthers } from './useEthers';\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\nimport { sanitizeTransactionRequest } from '../helpers/gnosisSafeUtils';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options) {\n  var _a, _b, _c;\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const transactionChainId = options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId) || chainId;\n  const {\n    promiseTransaction,\n    state,\n    resetState\n  } = usePromiseTransaction(transactionChainId, options);\n  const config = useConfig();\n  const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n  const providers = useReadonlyNetworks();\n  const provider = transactionChainId && providers[transactionChainId];\n  const sendTransaction = async transactionRequest => {\n    var _a, _b, _c;\n    const signer = getSignerFromOptions(provider, options, library);\n    if (signer) {\n      const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);\n      const sanitizedTransaction = sanitizeTransactionRequest(Object.assign(Object.assign({}, transactionRequest), {\n        gasLimit\n      }));\n      return promiseTransaction(signer.sendTransaction(sanitizedTransaction), {\n        safeTransaction: {\n          to: sanitizedTransaction.to,\n          value: (_a = sanitizedTransaction.value) === null || _a === void 0 ? void 0 : _a.toString(),\n          data: (_b = sanitizedTransaction.data) === null || _b === void 0 ? void 0 : _b.toString(),\n          safeTxGas: (_c = sanitizedTransaction.gasLimit) === null || _c === void 0 ? void 0 : _c.toString()\n        }\n      }, transactionRequest);\n    }\n  };\n  return {\n    sendTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useSendTransaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useConfig } from './useConfig';\nimport { useEthers } from './useEthers';\nimport { estimateTransactionGasLimit, usePromiseTransaction } from './usePromiseTransaction';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks/context';\nimport { getSignerFromOptions } from '../helpers/getSignerFromOptions';\nimport { sanitizeTransactionRequest } from '../helpers/gnosisSafeUtils';\n/**\n * Hook returns an object with three variables: `state`, `resetState`, and `sendTransaction`.\n *\n * ``state` represents the status of transaction. See {@link TransactionStatus}.\n *\n * `resetState` can be used to reset the state to `None` after a transaction attempt has either succeeded or failed.\n *\n * To send a transaction use `sendTransaction` function returned by `useSendTransaction`.\n *\n * Function accepts a [Transaction Request](https://docs.ethers.io/v5/api/providers/types/#providers-TransactionRequest) object as a parameter.\n * @public\n * @param options additional options of type {@link TransactionOptions}\n * @returns {} object with two variables: `sendTransaction` and `state`: `{ sendTransaction: (...args: any[]) => void, state: TransactionStatus }`.\n *\n * @example\n * const { sendTransaction, state } = useSendTransaction({ transactionName: 'Send Ethereum' })\n *\n * const handleClick = () => {\n *   ...\n *   sendTransaction({ to: address, value: utils.parseEther(amount) })\n * }\n */\nexport function useSendTransaction(options) {\n    var _a, _b, _c;\n    const { library, chainId } = useEthers();\n    const transactionChainId = (options && 'chainId' in options && (options === null || options === void 0 ? void 0 : options.chainId)) || chainId;\n    const { promiseTransaction, state, resetState } = usePromiseTransaction(transactionChainId, options);\n    const config = useConfig();\n    const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;\n    const providers = useReadonlyNetworks();\n    const provider = (transactionChainId && providers[transactionChainId]);\n    const sendTransaction = async (transactionRequest) => {\n        var _a, _b, _c;\n        const signer = getSignerFromOptions(provider, options, library);\n        if (signer) {\n            const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);\n            const sanitizedTransaction = sanitizeTransactionRequest(Object.assign(Object.assign({}, transactionRequest), { gasLimit }));\n            return promiseTransaction(signer.sendTransaction(sanitizedTransaction), {\n                safeTransaction: {\n                    to: sanitizedTransaction.to,\n                    value: (_a = sanitizedTransaction.value) === null || _a === void 0 ? void 0 : _a.toString(),\n                    data: (_b = sanitizedTransaction.data) === null || _b === void 0 ? void 0 : _b.toString(),\n                    safeTxGas: (_c = sanitizedTransaction.gasLimit) === null || _c === void 0 ? void 0 : _c.toString(),\n                },\n            }, transactionRequest);\n        }\n    };\n    return { sendTransaction, state, resetState };\n}\n//# sourceMappingURL=useSendTransaction.js.map"]},"metadata":{},"sourceType":"module"}