{"ast":null,"code":"import { useConnector } from '../providers/network/connectors';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/TrueFiEng/useDApp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers() {\n  const {\n    account,\n    library,\n    chainId,\n    active,\n    activate,\n    activateBrowserWallet,\n    deactivate,\n    setError,\n    error,\n    isLoading,\n    switchNetwork\n  } = useConnector();\n  return {\n    account,\n    library,\n    chainId,\n    active,\n    activate,\n    activateBrowserWallet,\n    deactivate,\n    setError,\n    error,\n    isLoading,\n    switchNetwork\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useEthers.ts"],"names":[],"mappings":"AAAA,SAAS,YAAY,QAAQ,iCAAiC;AAG9D;;;;;;;;;;;;;;AAcG;AACH,OAAM,SAAU,SAAS,CAAA,EAAA;EACvB,MAAM;IACJ,OAAO;IACP,OAAO;IACP,OAAO;IACP,MAAM;IACN,QAAQ;IACR,qBAAqB;IACrB,UAAU;IACV,QAAQ;IACR,KAAK;IACL,SAAS;IACT;EAAa,CACd,GAAG,YAAY,EAAE;EAElB,OAAO;IACL,OAAO;IACP,OAAO;IACP,OAAO;IACP,MAAM;IACN,QAAQ;IACR,qBAAqB;IACrB,UAAU;IACV,QAAQ;IACR,KAAK;IACL,SAAS;IACT;GACD;AACH","sourceRoot":"","sourcesContent":["import { useConnector } from '../providers/network/connectors';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/TrueFiEng/useDApp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers() {\n    const { account, library, chainId, active, activate, activateBrowserWallet, deactivate, setError, error, isLoading, switchNetwork, } = useConnector();\n    return {\n        account,\n        library,\n        chainId,\n        active,\n        activate,\n        activateBrowserWallet,\n        deactivate,\n        setError,\n        error,\n        isLoading,\n        switchNetwork,\n    };\n}\n//# sourceMappingURL=useEthers.js.map"]},"metadata":{},"sourceType":"module"}