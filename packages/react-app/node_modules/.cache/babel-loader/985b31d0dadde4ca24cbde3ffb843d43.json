{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport Web3 from \"web3\";\nimport { useEffect, useState } from \"react\";\nimport { useConfig } from \"@usedapp/core\";\nimport { ROUTER_ADDRESS } from \"../config\";\nimport { getFactoryInfo, getRouterInfo } from \"../utils\";\nexport const loadPools = async providerUrl => {\n  const provider = new Web3.providers.HttpProvider(providerUrl);\n  const web3 = new Web3(provider);\n  const routerInfo = await getRouterInfo(ROUTER_ADDRESS, web3);\n  const factoryInfo = await getFactoryInfo(routerInfo.factory, web3);\n  return factoryInfo.pairsInfo;\n};\nexport const usePools = () => {\n  _s();\n\n  const {\n    readOnlyChainId,\n    readOnlyUrls\n  } = useConfig();\n  const [loading, setLoading] = useState(true);\n  const [pools, setPools] = useState({});\n  useEffect(() => {\n    loadPools(readOnlyUrls[readOnlyChainId]).then(pools => {\n      setPools(pools);\n      setLoading(false);\n    });\n  }, [readOnlyUrls, readOnlyChainId]);\n  return [loading, pools];\n};\n\n_s(usePools, \"/d0TO/9nu6wsTHb6WZVb4alfsQU=\", false, function () {\n  return [useConfig];\n});","map":{"version":3,"names":["Web3","useEffect","useState","useConfig","ROUTER_ADDRESS","getFactoryInfo","getRouterInfo","loadPools","providerUrl","provider","providers","HttpProvider","web3","routerInfo","factoryInfo","factory","pairsInfo","usePools","readOnlyChainId","readOnlyUrls","loading","setLoading","pools","setPools","then"],"sources":["/Users/loe/Quant/project_web3_uniswap/packages/react-app/src/hooks/usePools.js"],"sourcesContent":["import Web3 from \"web3\";\nimport { useEffect, useState } from \"react\";\nimport { useConfig } from \"@usedapp/core\";\n\nimport { ROUTER_ADDRESS } from \"../config\";\nimport { getFactoryInfo, getRouterInfo } from \"../utils\";\n\nexport const loadPools = async (providerUrl) => {\n  const provider = new Web3.providers.HttpProvider(providerUrl);\n  const web3 = new Web3(provider);\n  const routerInfo = await getRouterInfo(ROUTER_ADDRESS, web3);\n  const factoryInfo = await getFactoryInfo(routerInfo.factory, web3);\n  return factoryInfo.pairsInfo;\n}\n\nexport const usePools = () => {\n  const { readOnlyChainId, readOnlyUrls } = useConfig();\n  const [loading, setLoading] = useState(true);\n  const [pools, setPools] = useState({});\n\n  useEffect(() => {\n    loadPools(readOnlyUrls[readOnlyChainId])\n        .then((pools) => {\n          setPools(pools);\n          setLoading(false);\n        });\n  }, [readOnlyUrls, readOnlyChainId]);\n\n  return [loading, pools];\n}\n"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,eAA1B;AAEA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,UAA9C;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,WAAP,IAAuB;EAC9C,MAAMC,QAAQ,GAAG,IAAIT,IAAI,CAACU,SAAL,CAAeC,YAAnB,CAAgCH,WAAhC,CAAjB;EACA,MAAMI,IAAI,GAAG,IAAIZ,IAAJ,CAASS,QAAT,CAAb;EACA,MAAMI,UAAU,GAAG,MAAMP,aAAa,CAACF,cAAD,EAAiBQ,IAAjB,CAAtC;EACA,MAAME,WAAW,GAAG,MAAMT,cAAc,CAACQ,UAAU,CAACE,OAAZ,EAAqBH,IAArB,CAAxC;EACA,OAAOE,WAAW,CAACE,SAAnB;AACD,CANM;AAQP,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EAC5B,MAAM;IAAEC,eAAF;IAAmBC;EAAnB,IAAoChB,SAAS,EAAnD;EACA,MAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACoB,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,EAAD,CAAlC;EAEAD,SAAS,CAAC,MAAM;IACdM,SAAS,CAACY,YAAY,CAACD,eAAD,CAAb,CAAT,CACKM,IADL,CACWF,KAAD,IAAW;MACfC,QAAQ,CAACD,KAAD,CAAR;MACAD,UAAU,CAAC,KAAD,CAAV;IACD,CAJL;EAKD,CANQ,EAMN,CAACF,YAAD,EAAeD,eAAf,CANM,CAAT;EAQA,OAAO,CAACE,OAAD,EAAUE,KAAV,CAAP;AACD,CAdM;;GAAML,Q;UAC+Bd,S"},"metadata":{},"sourceType":"module"}